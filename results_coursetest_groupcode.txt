npm verb cli /import/kamen/3/cs1531/.nvm/versions/node/v18.10.0/bin/node /import/kamen/3/cs1531/.nvm/versions/node/v18.10.0/bin/npm
npm info using npm@8.19.2
npm info using node@v18.10.0
npm timing npm:load:whichnode Completed in 0ms
npm timing config:load:defaults Completed in 2ms
npm timing config:load:file:/import/kamen/3/cs1531/.nvm/versions/node/v18.10.0/lib/node_modules/npm/npmrc Completed in 1ms
npm timing config:load:builtin Completed in 1ms
npm timing config:load:cli Completed in 2ms
npm timing config:load:env Completed in 0ms
npm timing config:load:file:/import/kamen/3/cs1531/project-automarking/tempstore/.npmrc Completed in 0ms
npm timing config:load:project Completed in 5ms
npm timing config:load:file:/import/kamen/3/cs1531/.npmrc Completed in 0ms
npm timing config:load:user Completed in 1ms
npm timing config:load:file:/import/kamen/3/cs1531/.nvm/versions/node/v18.10.0/etc/npmrc Completed in 0ms
npm timing config:load:global Completed in 0ms
npm timing config:load:validate Completed in 0ms
npm timing config:load:credentials Completed in 1ms
npm timing config:load:setEnvs Completed in 1ms
npm timing config:load Completed in 14ms
npm timing npm:load:configload Completed in 14ms
npm timing npm:load:mkdirpcache Completed in 4ms
npm timing npm:load:mkdirplogs Completed in 1ms
npm verb title npm run test course_tests/
npm verb argv "run" "test" "--loglevel" "verbose" "course_tests/"
npm timing npm:load:setTitle Completed in 1ms
npm timing config:load:flatten Completed in 3ms
npm timing npm:load:display Completed in 6ms
npm verb logfile logs-max:10 dir:/import/kamen/3/cs1531/.npm/_logs
npm verb logfile /import/kamen/3/cs1531/.npm/_logs/2022-10-08T04_41_34_458Z-debug-0.log
npm timing npm:load:logFile Completed in 5ms
npm timing npm:load:timers Completed in 0ms
npm timing npm:load:configScope Completed in 0ms
npm timing npm:load Completed in 31ms

> test
> jest course_tests/

FAIL course_tests/tests/channel_tests/channelJoin.test.js
  ● Test global owner can join private channel

    TypeError: Cannot read properties of undefined (reading 'map')

      22 |   channelJoinV1(uIdWoody, chIdZerg);
      23 |   const chDeets = channelDetailsV1(uIdWoody, chIdZerg);
    > 24 |   const owners = chDeets.ownerMembers.map(mem => mem.uId);
         |                                       ^
      25 |   const allmems = chDeets.allMembers.map(mem => mem.uId);
      26 |   expect(owners).toEqual(expect.not.arrayContaining([uIdWoody]));
      27 |   expect(allmems).toContain(uIdWoody);

      at Object.map (course_tests/tests/channel_tests/channelJoin.test.js:24:39)

  ● Test global owner can join public channel

    TypeError: Cannot read properties of undefined (reading 'map')

      31 |   channelJoinV1(uIdBuzz, chIdWoody);
      32 |   const chDeets = channelDetailsV1(uIdBuzz, chIdWoody);
    > 33 |   const owners = chDeets.ownerMembers.map(mem => mem.uId);
         |                                       ^
      34 |   const allmems = chDeets.allMembers.map(mem => mem.uId);
      35 |   expect(owners).toEqual(expect.not.arrayContaining([uIdBuzz]));
      36 |   expect(allmems).toContain(uIdBuzz);

      at Object.map (course_tests/tests/channel_tests/channelJoin.test.js:33:39)

FAIL course_tests/tests/channel_tests/channelDetails.test.js
  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"email": "blah1@email.com", "handleStr": "abcdefghijklmnopqrs", "nameFirst": "abcdefghij", "nameLast": "klmnopqrs", "uId": 3}
    Received array: [{"email": "sheriff.woody@andysroom.com", "handleStr": "sheriffwoody", "nameFirst": "sheriff", "nameLast": "woody", "uId": 1}, {"User_Handle": "abcdefghijklmnopqrs", "authUserId": 3}, {"User_Handle": "abcdefghijklmnopqrs0", "authUserId": 4}]

      41 |       const expected1 = { uId: uId1, email: email1, nameFirst: first1, nameLast: last1, handleStr: handle1 };
      42 |       const expected2 = { uId: uId2, email: email2, nameFirst: first2, nameLast: last2, handleStr: handle2 };
    > 43 |       expect(chDeets.allMembers).toContainEqual(expected1);
         |                                  ^
      44 |       expect(chDeets.allMembers).toContainEqual(expected2);
      45 |     }
      46 |   );

      at toContainEqual (course_tests/tests/channel_tests/channelDetails.test.js:43:34)

  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"email": "blah1@email.com", "handleStr": "abcdefghijklmnopqrst", "nameFirst": "abcdefghij", "nameLast": "klmnopqrst", "uId": 3}
    Received array: [{"email": "sheriff.woody@andysroom.com", "handleStr": "sheriffwoody", "nameFirst": "sheriff", "nameLast": "woody", "uId": 1}, {"User_Handle": "abcdefghijklmnopqrst", "authUserId": 3}, {"User_Handle": "abcdefghijklmnopqrst0", "authUserId": 4}]

      41 |       const expected1 = { uId: uId1, email: email1, nameFirst: first1, nameLast: last1, handleStr: handle1 };
      42 |       const expected2 = { uId: uId2, email: email2, nameFirst: first2, nameLast: last2, handleStr: handle2 };
    > 43 |       expect(chDeets.allMembers).toContainEqual(expected1);
         |                                  ^
      44 |       expect(chDeets.allMembers).toContainEqual(expected2);
      45 |     }
      46 |   );

      at toContainEqual (course_tests/tests/channel_tests/channelDetails.test.js:43:34)

  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"email": "blah1@email.com", "handleStr": "bcdefghjklmnopqrst", "nameFirst": "@bcdefgh!j", "nameLast": "klmn opqrst", "uId": 3}
    Received array: [{"email": "sheriff.woody@andysroom.com", "handleStr": "sheriffwoody", "nameFirst": "sheriff", "nameLast": "woody", "uId": 1}, {"User_Handle": "bcdefghjklmnopqrst", "authUserId": 3}, {"User_Handle": "bcdefghjklmnopqrst0", "authUserId": 4}]

      41 |       const expected1 = { uId: uId1, email: email1, nameFirst: first1, nameLast: last1, handleStr: handle1 };
      42 |       const expected2 = { uId: uId2, email: email2, nameFirst: first2, nameLast: last2, handleStr: handle2 };
    > 43 |       expect(chDeets.allMembers).toContainEqual(expected1);
         |                                  ^
      44 |       expect(chDeets.allMembers).toContainEqual(expected2);
      45 |     }
      46 |   );

      at toContainEqual (course_tests/tests/channel_tests/channelDetails.test.js:43:34)

  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"email": "blah1@email.com", "handleStr": "abcdef0", "nameFirst": "abc", "nameLast": "def0", "uId": 3}
    Received array: [{"email": "sheriff.woody@andysroom.com", "handleStr": "sheriffwoody", "nameFirst": "sheriff", "nameLast": "woody", "uId": 1}, {"User_Handle": "abcdef0", "authUserId": 3}, {"User_Handle": "abcdef1", "authUserId": 4}]

      41 |       const expected1 = { uId: uId1, email: email1, nameFirst: first1, nameLast: last1, handleStr: handle1 };
      42 |       const expected2 = { uId: uId2, email: email2, nameFirst: first2, nameLast: last2, handleStr: handle2 };
    > 43 |       expect(chDeets.allMembers).toContainEqual(expected1);
         |                                  ^
      44 |       expect(chDeets.allMembers).toContainEqual(expected2);
      45 |     }
      46 |   );

      at toContainEqual (course_tests/tests/channel_tests/channelDetails.test.js:43:34)

FAIL course_tests/tests/auth_tests/authRegister.test.js
  ● Test a long password auth register

    expect(received).toBeTruthy()

    Received: false

      84 |
      85 | test('Test a long password auth register', () => {
    > 86 |   expect(isValid(authRegisterV1(EMAIL, 'a'.repeat(64), FIRST, LAST))).toBeTruthy();
         |                                                                       ^
      87 | });
      88 |
      89 | test('Test short names auth register', () => {

      at Object.toBeTruthy (course_tests/tests/auth_tests/authRegister.test.js:86:71)

FAIL course_tests/tests/channels_tests/channelsList.test.js
  ● Test channel owner in channel › Create channel then list details

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"channelId": 0, "name": "andy"}
    Received array: []

      25 |       const chId = channelsCreateV1(uId, 'andy', pub).channelId;
      26 |       const deets = { channelId: chId, name: 'andy' };
    > 27 |       expect(channelsListV1(uId).channels).toContainEqual(deets);
         |                                            ^
      28 |     }
      29 |   );
      30 | });

      at toContainEqual (course_tests/tests/channels_tests/channelsList.test.js:27:44)

  ● Test channel member in channel › Create channel then list details

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"channelId": 0, "name": "andy"}
    Received array: []

      37 |       channelInviteV1(uId, chId, uIdWoody);
      38 |       const deets = { channelId: chId, name: 'andy' };
    > 39 |       expect(channelsListV1(uId).channels).toContainEqual(deets);
         |                                            ^
      40 |     }
      41 |   );
      42 | });

      at toContainEqual (course_tests/tests/channels_tests/channelsList.test.js:39:44)

  ● Test user in multiple channels › Create channel then list details

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  -  1
    + Received  + 10

    - Array []
    + Array [
    +   Object {
    +     "channelId": 0,
    +     "name": "andy",
    +   },
    +   Object {
    +     "channelId": 1,
    +     "name": "ZERG",
    +   },
    + ]

      53 |       deets.sort((a, b) => (a.channelId - b.channelId));
      54 |       expectedDeets.sort((a, b) => (a.channelId - b.channelId));
    > 55 |       expect(expectedDeets).toStrictEqual(deets);
         |                             ^
      56 |     }
      57 |   );
      58 | });

      at toStrictEqual (course_tests/tests/channels_tests/channelsList.test.js:55:29)

PASS course_tests/tests/channel_tests/channelInvite.test.js
PASS course_tests/tests/channel_tests/channelMessages.test.js
PASS course_tests/tests/user_tests/userProfile.test.js
PASS course_tests/tests/channels_tests/channelsCreate.test.js
PASS course_tests/tests/other_tests/clear.test.js
PASS course_tests/tests/channels_tests/channelsListall.test.js
PASS course_tests/tests/auth_tests/authLogin.test.js

Test Suites: 4 failed, 7 passed, 11 total
Tests:       10 failed, 52 passed, 62 total
Snapshots:   0 total
Time:        2.979 s
Ran all test suites matching /course_tests\//i.
npm timing command:run Completed in 4234ms
npm verb exit 1
npm timing npm Completed in 4273ms
npm verb code 1
