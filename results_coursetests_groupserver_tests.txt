============================= test session starts ==============================
platform linux -- Python 3.9.2, pytest-6.2.2, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/import/kamen/3/cs1531/project-automarking/tempstore/.hypothesis/examples')
metadata: {'Python': '3.9.2', 'Platform': 'Linux-5.10.0-17-amd64-x86_64-with-glibc2.31', 'Packages': {'pytest': '6.2.2', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'jest': '0.3.0', 'hypothesis': '6.1.1', 'timeout': '1.4.2', 'snapshottest': '0.6.0', 'metadata': '2.0.1', 'flask': '0.15.1'}}
rootdir: /import/kamen/3/cs1531/project-automarking/tempstore
plugins: jest-0.3.0, hypothesis-6.1.1, timeout-1.4.2, snapshottest-0.6.0, metadata-2.0.1, flask-0.15.1
collecting ... collected 368 items

httpTests/authTests/test_auth_login.py::testSuccessfulLogin PASSED       [  5%]
httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions ERROR     [  5%]
httpTests/authTests/test_auth_login.py::testUnregisteredUser PASSED      [  5%]
httpTests/authTests/test_auth_login.py::testRegisteredButIncorrectPassword ERROR [  6%]
httpTests/authTests/test_auth_logout.py::testSuccessfulLogout ERROR      [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[@gmail.com] PASSED [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob] FAILED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob@bob@bob.com] FAILED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[12345] FAILED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[] FAILED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[] FAILED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] FAILED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[] FAILED  [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] FAILED [  8%]
httpTests/authTests/test_auth_register.py::testDuplicateEmail PASSED     [  9%]
httpTests/authTests/test_auth_register.py::testRemovedUserName PASSED    [  9%]
httpTests/authTests/test_auth_register.py::testSuccessfulRegistration ERROR [  9%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] PASSED [ 10%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] ERROR [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] ERROR [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] ERROR [ 11%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] ERROR [ 11%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember ERROR [ 12%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerMemberCanAddowner ERROR [ 12%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCantAddownerWhenNonMember ERROR [ 13%]
httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner ERROR [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate ERROR [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic ERROR [ 13%]
httpTests/channelTests/test_channel_addowner.py::testMemberCannotAddOwner ERROR [ 14%]
httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner ERROR [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId ERROR [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidChannelId ERROR [ 14%]
httpTests/channelTests/test_channel_addowner.py::testInvalidToken ERROR  [ 15%]
httpTests/channelTests/test_channel_details.py::testMemberSuccessful ERROR [ 15%]
httpTests/channelTests/test_channel_details.py::testNonMemberNotSuccessful ERROR [ 15%]
httpTests/channelTests/test_channel_details.py::testInvalidChannelId ERROR [ 16%]
httpTests/channelTests/test_channel_details.py::testInvalidToken ERROR   [ 16%]
httpTests/channelTests/test_channel_invite.py::testDuplicateInvite ERROR [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalOwner ERROR [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalMember ERROR [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvitationFromNonChannelMember ERROR [ 17%]
httpTests/channelTests/test_channel_invite.py::testChannelIdInvalid ERROR [ 17%]
httpTests/channelTests/test_channel_invite.py::testUIdInvalid ERROR      [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvalidatedToken ERROR [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPublic ERROR [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate ERROR [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberJoinPublic ERROR [ 19%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberCantJoinPrivate ERROR [ 19%]
httpTests/channelTests/test_channel_join.py::testAlreadyJoinedChannel ERROR [ 19%]
httpTests/channelTests/test_channel_join.py::testJoinInvalidChannelId ERROR [ 19%]
httpTests/channelTests/test_channel_join.py::testInvalidatedToken ERROR  [ 20%]
httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully ERROR [ 20%]
httpTests/channelTests/test_channel_leave.py::testLeaveChannelWhenNotMember ERROR [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidChannelId ERROR [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidToken ERROR     [ 21%]
httpTests/channelTests/test_channel_messages.py::testMessageTimestamp ERROR [ 21%]
httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent ERROR [ 21%]
httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent ERROR [ 22%]
httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected ERROR [ 22%]
httpTests/channelTests/test_channel_messages.py::testRemovalByDeletionReflected ERROR [ 22%]
httpTests/channelTests/test_channel_messages.py::testInputErrorWhenStartGreaterThanMessageNum ERROR [ 22%]
httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenUserIsNonMember ERROR [ 23%]
httpTests/channelTests/test_channel_messages.py::testInputErrorWhenChannelIdInvalid ERROR [ 23%]
httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenInvalidTokenGiven ERROR [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner ERROR [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner ERROR [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner ERROR [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner ERROR [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner ERROR [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner ERROR [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner ERROR [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveNonOwner ERROR [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidUId ERROR [ 26%]
httpTests/channelTests/test_channel_removeowner.py::testWithInvalidChannelId ERROR [ 26%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken ERROR [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[True-andys room] ERROR [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[False-andys room] ERROR [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-] ERROR [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] ERROR [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-] ERROR [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] ERROR [ 28%]
httpTests/channels_tests/test_channels_create.py::testInvalidatedToken ERROR [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInNoChannels ERROR [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[True-andy] ERROR [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[False-andy] ERROR [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-True-ZERG-andy] ERROR [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-False-ZERG-andy] ERROR [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-True-ZERG-andy] ERROR [ 30%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-False-ZERG-andy] ERROR [ 30%]
httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel ERROR [ 30%]
httpTests/channels_tests/test_channels_list.py::testInvalidatedToken ERROR [ 30%]
httpTests/channels_tests/test_channels_listall.py::testWhenNoChannels ERROR [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPrivate ERROR [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPublic ERROR [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenMultipleChannelsExist ERROR [ 32%]
httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken ERROR [ 32%]
httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation ERROR      [ 32%]
httpTests/dmTests/test_dm_create.py::testDmNameCreationSingle ERROR      [ 32%]
httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple ERROR    [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToInvalidUsers ERROR          [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButOneInvalid ERROR    [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButDuplicate ERROR     [ 33%]
httpTests/dmTests/test_dm_create.py::testInvalidToken ERROR              [ 34%]
httpTests/dmTests/test_dm_details.py::testMemberSuccessful ERROR         [ 34%]
httpTests/dmTests/test_dm_details.py::testNonMemberNotSuccessful ERROR   [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidDmId ERROR              [ 35%]
httpTests/dmTests/test_dm_details.py::testInvalidToken ERROR             [ 35%]
httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully ERROR  [ 35%]
httpTests/dmTests/test_dm_leave.py::testLeaveDmWhenNotMember ERROR       [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidDmId ERROR                [ 36%]
httpTests/dmTests/test_dm_leave.py::testInvalidToken ERROR               [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInNoDms ERROR                 [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInOneDm ERROR                 [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms ERROR           [ 37%]
httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm ERROR            [ 37%]
httpTests/dmTests/test_dm_list.py::testInvalidatedToken ERROR            [ 37%]
httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent ERROR  [ 38%]
httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent ERROR   [ 38%]
httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected ERROR  [ 38%]
httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected ERROR [ 38%]
httpTests/dmTests/test_dm_messages.py::testInputErrorWhenStartGreaterThanMessageNum ERROR [ 39%]
httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenUserIsNonMember ERROR [ 39%]
httpTests/dmTests/test_dm_messages.py::testInputErrorWhenDmIdInvalid ERROR [ 39%]
httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenInvalidTokenGiven ERROR [ 39%]
httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval ERROR       [ 40%]
httpTests/dmTests/test_dm_remove.py::testNonownerCannotRemoveDm ERROR    [ 40%]
httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm ERROR [ 41%]
httpTests/dmTests/test_dm_remove.py::testInvalidDmId ERROR               [ 41%]
httpTests/dmTests/test_dm_remove.py::testInvalidToken ERROR              [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel ERROR [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testInvalidMessageLength ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage ERROR [ 43%]
httpTests/messageTests/test_message_edit.py::testNonownerNonposterCantEdit ERROR [ 43%]
httpTests/messageTests/test_message_edit.py::testInvalidToken ERROR      [ 43%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUnique ERROR  [ 44%]
httpTests/messageTests/test_message_remove.py::testOriginalPosterCanRemoveMessage ERROR [ 49%]
httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm ERROR [ 49%]
httpTests/messageTests/test_message_remove.py::testCannotRemoveDeletedMessage ERROR [ 49%]
httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage ERROR [ 50%]
httpTests/messageTests/test_message_remove.py::testInvalidToken ERROR    [ 50%]
httpTests/messageTests/test_message_send.py::testValidMessage ERROR      [ 50%]
httpTests/messageTests/test_message_send.py::testNonmemberPost ERROR     [ 50%]
httpTests/messageTests/test_message_send.py::testInvalidChannel ERROR    [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[] ERROR  [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] ERROR [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidToken ERROR      [ 51%]
httpTests/messageTests/test_message_senddm.py::testValidMessage ERROR    [ 52%]
httpTests/messageTests/test_message_senddm.py::testNonmemberPost ERROR   [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidDm ERROR       [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[] ERROR [ 52%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] ERROR [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidToken ERROR    [ 53%]
httpTests/otherTests/test_clear.py::testClearWorks ERROR                 [ 66%]
httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll ERROR     [ 75%]
httpTests/otherTests/test_users_all.py::testInvalidToken ERROR           [ 75%]
httpTests/userTests/test_user_profile.py::testUserProfileValid ERROR     [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidUser ERROR          [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidToken ERROR         [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange ERROR [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testCannotChangeToTakenEmail ERROR [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[] ERROR [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[bob] ERROR [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab.com] ERROR [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[@gmail.com] ERROR [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab@ab@gmail.com] ERROR [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidToken ERROR [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange ERROR [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle ERROR [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[] ERROR [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a] ERROR [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa] ERROR [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] ERROR [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle] ERROR [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle] ERROR [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken ERROR [ 95%]
httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName ERROR [ 95%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-] ERROR [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] ERROR [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] ERROR [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] ERROR [ 97%]
httpTests/userTests/test_user_profile_setname.py::testInvalidToken ERROR [ 97%]

====== Marks recorded: 3.56 ======


==================================== ERRORS ====================================
___________________ ERROR at setup of testCanHaveTwoSessions ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1de4040>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________ ERROR at setup of testRegisteredButIncorrectPassword _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1cb7160>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testSuccessfulLogout ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1d111f0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testSuccessfulRegistration _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1e5e160>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_ ERROR at setup of testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] _

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1d25160>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_ ERROR at setup of testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] _

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1d259d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_ ERROR at setup of testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] _

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1d229d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_ ERROR at setup of testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] _

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1d22b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
___________ ERROR at setup of testChannelOwnerCanAddownerWhenMember ____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1d4c670>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________ ERROR at setup of testGlobalOwnerMemberCanAddowner ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1d4c9d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________ ERROR at setup of testChannelOwnerCantAddownerWhenNonMember __________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1c71f70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
________________ ERROR at setup of testNonMemberCannotAddOwner _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1d4c820>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
________ ERROR at setup of testGlobalOwnerNonMemberCantAddownerPrivate _________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1c999d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________ ERROR at setup of testGlobalOwnerNonMemberCantAddownerPublic _________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1c99d30>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________________ ERROR at setup of testMemberCannotAddOwner __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1c99940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________ ERROR at setup of testCannotAddownerPrexistingChannelOwner __________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1cacf70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________________ ERROR at setup of testWithInvalidUId _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1cacca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________________ ERROR at setup of testWithInvalidChannelId __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1cace50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1c29b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testMemberSuccessful ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1c26c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testNonMemberNotSuccessful _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1c264c0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testInvalidChannelId ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1c26b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1c13940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testDuplicateInvite _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1c13af0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
___________________ ERROR at setup of testInviteGlobalOwner ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1bce0d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
___________________ ERROR at setup of testInviteGlobalMember ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1bce940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________ ERROR at setup of testInvitationFromNonChannelMember _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1bcff70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testChannelIdInvalid ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1bcf8b0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_______________________ ERROR at setup of testUIdInvalid _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1bcfc10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testInvalidatedToken ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1b7de50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________ ERROR at setup of testGlobalOwnerJoinChannelPublic ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1b735e0>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________ ERROR at setup of testGlobalOwnerJoinChannelPrivate ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1b73d30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testGlobalMemberJoinPublic _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1cb7ca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________ ERROR at setup of testGlobalMemberCantJoinPrivate _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1d11dc0>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________________ ERROR at setup of testAlreadyJoinedChannel __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1b4dee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________________ ERROR at setup of testJoinInvalidChannelId __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1b3a8b0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testInvalidatedToken ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1b3a940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________ ERROR at setup of testMemberLeaveChannelSuccessfully _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1b3a040>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_______________ ERROR at setup of testLeaveChannelWhenNotMember ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1b62d30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testInvalidChannelId ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1b62e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1af8c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testMessageTimestamp ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1b0aca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testUnderFiftyMessagesSent _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1b0a4c0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testOverFiftyMessagesSent __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1af5430>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testRemovalByEditReflected _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1af59d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_______________ ERROR at setup of testRemovalByDeletionReflected _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1af5b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
________ ERROR at setup of testInputErrorWhenStartGreaterThanMessageNum ________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1abe1f0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________ ERROR at setup of testAccessErrorWhenUserIsNonMember _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1adca60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________ ERROR at setup of testInputErrorWhenChannelIdInvalid _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1adce50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________ ERROR at setup of testAccessErrorWhenInvalidTokenGiven ____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1abeee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________________ ERROR at setup of testOwnerCanRemoveOwner ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1abed30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________ ERROR at setup of testGlobalOwnerMmberCanRemoveOwner _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1a9c8b0>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________ ERROR at setup of testGlobalOwnerNonmemberCannotRemoveOwner __________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1a96f70>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_______________ ERROR at setup of testNonmemberCannotRemoveOwner _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1a96ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testMmberCannotRemoveOwner _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1a96790>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testCannotRemoveLastOwner __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1a56dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________ ERROR at setup of testGlobalOwnerCannotRemoveOnlyOwner ____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1a5ad30>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________________ ERROR at setup of testCannotRemoveNonOwner __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1a5a4c0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_______________________ ERROR at setup of testInvalidUId _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1a5ac10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________________ ERROR at setup of testWithInvalidChannelId __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1a6d9d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testInvalidatedToken ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1a6da60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________ ERROR at setup of testCreateChannel[True-andys room] _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad19f9790>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________ ERROR at setup of testCreateChannel[False-andys room] _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad19f9940>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________ ERROR at setup of testInvalidChannelNameLength[True-] _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1a22ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_ ERROR at setup of testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] _

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1a22c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________ ERROR at setup of testInvalidChannelNameLength[False-] ____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1a22f70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_ ERROR at setup of testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] _

userFactory = <function userFactory.<locals>.makeUser at 0x7faad19dc790>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testInvalidatedToken ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad19dcca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testWhenInNoChannels ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad19c4670>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________ ERROR at setup of testWhenInOneChannel[True-andy] _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad19eaca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________ ERROR at setup of testWhenInOneChannel[False-andy] ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad19eab80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______ ERROR at setup of testWhenInMultipleChannels[False-True-ZERG-andy] ______

userFactory = <function userFactory.<locals>.makeUser at 0x7faad19769d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____ ERROR at setup of testWhenInMultipleChannels[False-False-ZERG-andy] ______

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1977160>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______ ERROR at setup of testWhenInMultipleChannels[True-True-ZERG-andy] _______

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1977a60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______ ERROR at setup of testWhenInMultipleChannels[True-False-ZERG-andy] ______

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1932040>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testListAfterLeaveChannel __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad19779d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testInvalidatedToken ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad19eac10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________________ ERROR at setup of testWhenNoChannels _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1932f70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________ ERROR at setup of testWhenOneChannelExistsPrivate _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1943e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_______________ ERROR at setup of testWhenOneChannelExistsPublic _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1943790>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_______________ ERROR at setup of testWhenMultipleChannelsExist ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1943ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testInvalidatedToken ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad195b670>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________________ ERROR at setup of testSuccessfulDmCreation __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad195bdc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________________ ERROR at setup of testDmNameCreationSingle __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad192e550>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testDmNameCreationMultiple _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1909a60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testDmToInvalidUsers ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1909c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testDmToUsersButOneInvalid _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1909f70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testDmToUsersButDuplicate __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad18d9af0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad18d9e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testMemberSuccessful ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad18d69d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testNonMemberNotSuccessful _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad18d1940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidDmId _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad18d6ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad18d18b0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_______________ ERROR at setup of testMemberLeaveDmSuccessfully ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad18a2d30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________________ ERROR at setup of testLeaveDmWhenNotMember __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad18a2f70>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidDmId _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1898dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1898ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testWhenInNoDms _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1865e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testWhenInOneDm _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1865dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
___________________ ERROR at setup of testWhenInMultipleDms ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1868b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testListAfterLeaveDm ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1868550>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testInvalidatedToken ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad18309d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testUnderFiftyMessagesSent _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1830b80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testOverFiftyMessagesSent __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1830ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testRemovalByEditReflected _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1828af0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_______________ ERROR at setup of testRemovalByDeletionReflected _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1828e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
________ ERROR at setup of testInputErrorWhenStartGreaterThanMessageNum ________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad18299d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________ ERROR at setup of testAccessErrorWhenUserIsNonMember _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1829d30>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_______________ ERROR at setup of testInputErrorWhenDmIdInvalid ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad17bac10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________ ERROR at setup of testAccessErrorWhenInvalidTokenGiven ____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad17ba8b0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________________ ERROR at setup of testSuccessfulDmRemoval ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad17bef70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testNonownerCannotRemoveDm _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad17e3820>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________ ERROR at setup of testOwnerNonmemberCannotRemoveDm ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad17e3dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidDmId _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad17e3790>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad17a7c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________ ERROR at setup of testOriginalPosterCanEditMessageChannel ___________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad17a7dc0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________ ERROR at setup of testOriginalPosterCanEditMessageDm _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad179fb80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________ ERROR at setup of testGlobalOwnerCantEditMembersMessageDm ___________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad179f550>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
________________ ERROR at setup of testEmptyEditDeletesMessage _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad179fca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________________ ERROR at setup of testInvalidMessageLength __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1759310>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
________________ ERROR at setup of testCannotEditDeletedMessage ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1759a60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_______________ ERROR at setup of testNonownerNonposterCantEdit ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1763940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1763ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testMessageIdsUnique ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1767c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________ ERROR at setup of testOriginalPosterCanRemoveMessage _____________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1712820>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________ ERROR at setup of testGlobalOwnerCantRemoveMembersMessageDm __________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad172d670>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_______________ ERROR at setup of testCannotRemoveDeletedMessage _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad172d040>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
___________ ERROR at setup of testNonownerNonposterCantRemoveMessage ___________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad172d5e0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad172df70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testValidMessage ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad16df1f0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________________ ERROR at setup of testNonmemberPost ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad16dfaf0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________________ ERROR at setup of testInvalidChannel _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad16bc040>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testInvalidMessage[] ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad16bc940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_ ERROR at setup of testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

userFactory = <function userFactory.<locals>.makeUser at 0x7faad16c2f70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad16c2700>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testValidMessage ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad167ee50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________________ ERROR at setup of testNonmemberPost ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad167e670>

    @pytest.fixture
    def userZerg(userFactory):
>       return userFactory('zerg.thedestroyer@zergworld.com', '!!qazwsx', 'lord', 'zerg')

httpTests/fixtures.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_______________________ ERROR at setup of testInvalidDm ________________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad168fca0>

    @pytest.fixture
    def userBuzz(userFactory):
>       return userFactory('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear')

httpTests/fixtures.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testInvalidMessage[] ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad168f550>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_ ERROR at setup of testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

userFactory = <function userFactory.<locals>.makeUser at 0x7faad165a310>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad165aaf0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_______________________ ERROR at setup of testClearWorks _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad16400d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
___________________ ERROR at setup of testSuccessfulUsersAll ___________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad160cc10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad160cb80>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testUserProfileValid ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1640af0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidUser _______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad160c4c0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad161dc10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testSuccessfulEmailChange __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1613a60>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
________________ ERROR at setup of testCannotChangeToTakenEmail ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad16139d0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________________ ERROR at setup of testInvalidEmail[] _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad15cd940>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
___________________ ERROR at setup of testInvalidEmail[bob] ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad15cdee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________________ ERROR at setup of testInvalidEmail[ab.com] __________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad15eb820>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
________________ ERROR at setup of testInvalidEmail[@gmail.com] ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad15ebee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________ ERROR at setup of testInvalidEmail[ab@ab@gmail.com] ______________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad15eae50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad15ea700>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_________________ ERROR at setup of testSuccessfulHandleChange _________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad15ead30>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_______________ ERROR at setup of testCannotChangeToTakenHandle ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad15aaca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testInvalidHandle[] _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad15764c0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
____________________ ERROR at setup of testInvalidHandle[a] ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1576ca0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
___________________ ERROR at setup of testInvalidHandle[aa] ____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1576c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
__________ ERROR at setup of testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] __________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad154a280>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_______________ ERROR at setup of testInvalidHandle[new handle] ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1546af0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
________________ ERROR at setup of testInvalidHandle[newh@ndle] ________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad154aaf0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad154a1f0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________ ERROR at setup of testUserProfileSetnameValidName _______________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1531f70>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_____________________ ERROR at setup of testInvalidName[-] _____________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad15318b0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_ ERROR at setup of testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] _

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1531c10>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_ ERROR at setup of testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] _

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1515e50>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
_ ERROR at setup of testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] _

userFactory = <function userFactory.<locals>.makeUser at 0x7faad1515ee0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
______________________ ERROR at setup of testInvalidToken ______________________

userFactory = <function userFactory.<locals>.makeUser at 0x7faad15014c0>

    @pytest.fixture
    def userWoody(userFactory):
>       woody = userFactory('sheriff.woody@andysroom.com', 'qazwsx!!', 'sheriff', 'woody')

httpTests/fixtures.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:40: in makeUser
    reg = auth.authRegister(email, password, nameFirst, nameLast, ctx)
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
---------------------------- Captured stdout setup -----------------------------
{'error': 'Email in Use.'}
=================================== FAILURES ===================================
____________________________ testInvalidEmail[bob] _____________________________

email = 'bob', ctx = None

    @pytest.mark.parametrize('email', ['@gmail.com', 'bob', 'bob@bob@bob.com'])
    def testInvalidEmail(email, ctx):
        with pytest.raises(InputError):
            authRegister(email, PASSWORD, FIRST, LAST, ctx)
>       authRegister(EMAIL, PASSWORD, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
----------------------------- Captured stdout call -----------------------------
{'error': 'Invalid Details.'}
{'error': 'Email in Use.'}
______________________ testInvalidEmail[bob@bob@bob.com] _______________________

email = 'bob@bob@bob.com', ctx = None

    @pytest.mark.parametrize('email', ['@gmail.com', 'bob', 'bob@bob@bob.com'])
    def testInvalidEmail(email, ctx):
        with pytest.raises(InputError):
            authRegister(email, PASSWORD, FIRST, LAST, ctx)
>       authRegister(EMAIL, PASSWORD, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
----------------------------- Captured stdout call -----------------------------
{'error': 'Invalid Details.'}
{'error': 'Email in Use.'}
__________________________ testInvalidPassword[12345] __________________________

password = '12345', ctx = None

    @pytest.mark.parametrize('password', ['12345', ''])
    def testInvalidPassword(password, ctx):
        with pytest.raises(InputError):
            authRegister(EMAIL, password, FIRST, LAST, ctx)
>       authRegister(EMAIL, PASSWORD, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
----------------------------- Captured stdout call -----------------------------
{'error': 'Invalid Details.'}
{'error': 'Email in Use.'}
____________________________ testInvalidPassword[] _____________________________

password = '', ctx = None

    @pytest.mark.parametrize('password', ['12345', ''])
    def testInvalidPassword(password, ctx):
        with pytest.raises(InputError):
            authRegister(EMAIL, password, FIRST, LAST, ctx)
>       authRegister(EMAIL, PASSWORD, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
----------------------------- Captured stdout call -----------------------------
{'error': 'Invalid Details.'}
{'error': 'Email in Use.'}
____________________________ testInvalidNameFirst[] ____________________________

nameFirst = '', ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'a' * 51])
    def testInvalidNameFirst(nameFirst, ctx):
        with pytest.raises(InputError):
            authRegister(EMAIL, PASSWORD, nameFirst, LAST, ctx)
>       authRegister(EMAIL, PASSWORD, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
----------------------------- Captured stdout call -----------------------------
{'error': 'Invalid Details.'}
{'error': 'Email in Use.'}
__ testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] ___

nameFirst = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'a' * 51])
    def testInvalidNameFirst(nameFirst, ctx):
        with pytest.raises(InputError):
            authRegister(EMAIL, PASSWORD, nameFirst, LAST, ctx)
>       authRegister(EMAIL, PASSWORD, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
----------------------------- Captured stdout call -----------------------------
{'error': 'Invalid Details.'}
{'error': 'Email in Use.'}
____________________________ testInvalidNameLast[] _____________________________

nameLast = '', ctx = None

    @pytest.mark.parametrize('nameLast', ['', 'b' * 51])
    def testInvalidNameLast(nameLast, ctx):
        with pytest.raises(InputError):
            authRegister(EMAIL, PASSWORD, FIRST, nameLast, ctx)
>       authRegister(EMAIL, PASSWORD, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
----------------------------- Captured stdout call -----------------------------
{'error': 'Invalid Details.'}
{'error': 'Email in Use.'}
___ testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] ___

nameLast = 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', ctx = None

    @pytest.mark.parametrize('nameLast', ['', 'b' * 51])
    def testInvalidNameLast(nameLast, ctx):
        with pytest.raises(InputError):
            authRegister(EMAIL, PASSWORD, FIRST, nameLast, ctx)
>       authRegister(EMAIL, PASSWORD, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
----------------------------- Captured stdout call -----------------------------
{'error': 'Invalid Details.'}
{'error': 'Email in Use.'}
_ testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] _

nameFirst = 'ababababab', nameLast = 'cdcdcdcdcdcd'
expectedHandle = 'abababababcdcdcdcdcd', ctx = None

    @pytest.mark.parametrize('nameFirst, nameLast, expectedHandle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def testBasicHandleGeneratedCorrectly(nameFirst, nameLast, expectedHandle, ctx):
>       session = authRegister('bob.jane@gmail.com', '~~qazwsx', nameFirst, nameLast, ctx)

httpTests/authTests/test_auth_register.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.InputError()
E               httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:134: InputError
----------------------------- Captured stdout call -----------------------------
{'error': 'Email in Use.'}
=========================== short test summary info ============================
FAILED httpTests/authTests/test_auth_register.py::testInvalidEmail[bob] - htt...
FAILED httpTests/authTests/test_auth_register.py::testInvalidEmail[bob@bob@bob.com]
FAILED httpTests/authTests/test_auth_register.py::testInvalidPassword[12345]
FAILED httpTests/authTests/test_auth_register.py::testInvalidPassword[] - htt...
FAILED httpTests/authTests/test_auth_register.py::testInvalidNameFirst[] - ht...
FAILED httpTests/authTests/test_auth_register.py::testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]
FAILED httpTests/authTests/test_auth_register.py::testInvalidNameLast[] - htt...
FAILED httpTests/authTests/test_auth_register.py::testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb]
FAILED httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd]
ERROR httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions - httpTe...
ERROR httpTests/authTests/test_auth_login.py::testRegisteredButIncorrectPassword
ERROR httpTests/authTests/test_auth_logout.py::testSuccessfulLogout - httpTes...
ERROR httpTests/authTests/test_auth_register.py::testSuccessfulRegistration
ERROR httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0]
ERROR httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0]
ERROR httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0]
ERROR httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1]
ERROR httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember
ERROR httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerMemberCanAddowner
ERROR httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCantAddownerWhenNonMember
ERROR httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner
ERROR httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate
ERROR httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic
ERROR httpTests/channelTests/test_channel_addowner.py::testMemberCannotAddOwner
ERROR httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner
ERROR httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId - h...
ERROR httpTests/channelTests/test_channel_addowner.py::testWithInvalidChannelId
ERROR httpTests/channelTests/test_channel_addowner.py::testInvalidToken - htt...
ERROR httpTests/channelTests/test_channel_details.py::testMemberSuccessful - ...
ERROR httpTests/channelTests/test_channel_details.py::testNonMemberNotSuccessful
ERROR httpTests/channelTests/test_channel_details.py::testInvalidChannelId - ...
ERROR httpTests/channelTests/test_channel_details.py::testInvalidToken - http...
ERROR httpTests/channelTests/test_channel_invite.py::testDuplicateInvite - ht...
ERROR httpTests/channelTests/test_channel_invite.py::testInviteGlobalOwner - ...
ERROR httpTests/channelTests/test_channel_invite.py::testInviteGlobalMember
ERROR httpTests/channelTests/test_channel_invite.py::testInvitationFromNonChannelMember
ERROR httpTests/channelTests/test_channel_invite.py::testChannelIdInvalid - h...
ERROR httpTests/channelTests/test_channel_invite.py::testUIdInvalid - httpTes...
ERROR httpTests/channelTests/test_channel_invite.py::testInvalidatedToken - h...
ERROR httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPublic
ERROR httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate
ERROR httpTests/channelTests/test_channel_join.py::testGlobalMemberJoinPublic
ERROR httpTests/channelTests/test_channel_join.py::testGlobalMemberCantJoinPrivate
ERROR httpTests/channelTests/test_channel_join.py::testAlreadyJoinedChannel
ERROR httpTests/channelTests/test_channel_join.py::testJoinInvalidChannelId
ERROR httpTests/channelTests/test_channel_join.py::testInvalidatedToken - htt...
ERROR httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully
ERROR httpTests/channelTests/test_channel_leave.py::testLeaveChannelWhenNotMember
ERROR httpTests/channelTests/test_channel_leave.py::testInvalidChannelId - ht...
ERROR httpTests/channelTests/test_channel_leave.py::testInvalidToken - httpTe...
ERROR httpTests/channelTests/test_channel_messages.py::testMessageTimestamp
ERROR httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent
ERROR httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent
ERROR httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected
ERROR httpTests/channelTests/test_channel_messages.py::testRemovalByDeletionReflected
ERROR httpTests/channelTests/test_channel_messages.py::testInputErrorWhenStartGreaterThanMessageNum
ERROR httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenUserIsNonMember
ERROR httpTests/channelTests/test_channel_messages.py::testInputErrorWhenChannelIdInvalid
ERROR httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenInvalidTokenGiven
ERROR httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveNonOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testInvalidUId - ht...
ERROR httpTests/channelTests/test_channel_removeowner.py::testWithInvalidChannelId
ERROR httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken
ERROR httpTests/channels_tests/test_channels_create.py::testCreateChannel[True-andys room]
ERROR httpTests/channels_tests/test_channels_create.py::testCreateChannel[False-andys room]
ERROR httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-]
ERROR httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG]
ERROR httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-]
ERROR httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG]
ERROR httpTests/channels_tests/test_channels_create.py::testInvalidatedToken
ERROR httpTests/channels_tests/test_channels_list.py::testWhenInNoChannels - ...
ERROR httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[True-andy]
ERROR httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[False-andy]
ERROR httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-True-ZERG-andy]
ERROR httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-False-ZERG-andy]
ERROR httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-True-ZERG-andy]
ERROR httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-False-ZERG-andy]
ERROR httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel
ERROR httpTests/channels_tests/test_channels_list.py::testInvalidatedToken - ...
ERROR httpTests/channels_tests/test_channels_listall.py::testWhenNoChannels
ERROR httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPrivate
ERROR httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPublic
ERROR httpTests/channels_tests/test_channels_listall.py::testWhenMultipleChannelsExist
ERROR httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken
ERROR httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation - httpTes...
ERROR httpTests/dmTests/test_dm_create.py::testDmNameCreationSingle - httpTes...
ERROR httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple - httpT...
ERROR httpTests/dmTests/test_dm_create.py::testDmToInvalidUsers - httpTests.e...
ERROR httpTests/dmTests/test_dm_create.py::testDmToUsersButOneInvalid - httpT...
ERROR httpTests/dmTests/test_dm_create.py::testDmToUsersButDuplicate - httpTe...
ERROR httpTests/dmTests/test_dm_create.py::testInvalidToken - httpTests.error...
ERROR httpTests/dmTests/test_dm_details.py::testMemberSuccessful - httpTests....
ERROR httpTests/dmTests/test_dm_details.py::testNonMemberNotSuccessful - http...
ERROR httpTests/dmTests/test_dm_details.py::testInvalidDmId - httpTests.error...
ERROR httpTests/dmTests/test_dm_details.py::testInvalidToken - httpTests.erro...
ERROR httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully - htt...
ERROR httpTests/dmTests/test_dm_leave.py::testLeaveDmWhenNotMember - httpTest...
ERROR httpTests/dmTests/test_dm_leave.py::testInvalidDmId - httpTests.error.I...
ERROR httpTests/dmTests/test_dm_leave.py::testInvalidToken - httpTests.error....
ERROR httpTests/dmTests/test_dm_list.py::testWhenInNoDms - httpTests.error.In...
ERROR httpTests/dmTests/test_dm_list.py::testWhenInOneDm - httpTests.error.In...
ERROR httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms - httpTests.er...
ERROR httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm - httpTests.err...
ERROR httpTests/dmTests/test_dm_list.py::testInvalidatedToken - httpTests.err...
ERROR httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent - htt...
ERROR httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent - http...
ERROR httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected - htt...
ERROR httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected
ERROR httpTests/dmTests/test_dm_messages.py::testInputErrorWhenStartGreaterThanMessageNum
ERROR httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenUserIsNonMember
ERROR httpTests/dmTests/test_dm_messages.py::testInputErrorWhenDmIdInvalid - ...
ERROR httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenInvalidTokenGiven
ERROR httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval - httpTest...
ERROR httpTests/dmTests/test_dm_remove.py::testNonownerCannotRemoveDm - httpT...
ERROR httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm
ERROR httpTests/dmTests/test_dm_remove.py::testInvalidDmId - httpTests.error....
ERROR httpTests/dmTests/test_dm_remove.py::testInvalidToken - httpTests.error...
ERROR httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel
ERROR httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm
ERROR httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm
ERROR httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage
ERROR httpTests/messageTests/test_message_edit.py::testInvalidMessageLength
ERROR httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage
ERROR httpTests/messageTests/test_message_edit.py::testNonownerNonposterCantEdit
ERROR httpTests/messageTests/test_message_edit.py::testInvalidToken - httpTes...
ERROR httpTests/messageTests/test_message_meta.py::testMessageIdsUnique - htt...
ERROR httpTests/messageTests/test_message_remove.py::testOriginalPosterCanRemoveMessage
ERROR httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm
ERROR httpTests/messageTests/test_message_remove.py::testCannotRemoveDeletedMessage
ERROR httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage
ERROR httpTests/messageTests/test_message_remove.py::testInvalidToken - httpT...
ERROR httpTests/messageTests/test_message_send.py::testValidMessage - httpTes...
ERROR httpTests/messageTests/test_message_send.py::testNonmemberPost - httpTe...
ERROR httpTests/messageTests/test_message_send.py::testInvalidChannel - httpT...
ERROR httpTests/messageTests/test_message_send.py::testInvalidMessage[] - htt...
ERROR httpTests/messageTests/test_message_send.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
ERROR httpTests/messageTests/test_message_send.py::testInvalidToken - httpTes...
ERROR httpTests/messageTests/test_message_senddm.py::testValidMessage - httpT...
ERROR httpTests/messageTests/test_message_senddm.py::testNonmemberPost - http...
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidDm - httpTest...
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidMessage[] - h...
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidToken - httpT...
ERROR httpTests/otherTests/test_clear.py::testClearWorks - httpTests.error.In...
ERROR httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll - httpTe...
ERROR httpTests/otherTests/test_users_all.py::testInvalidToken - httpTests.er...
ERROR httpTests/userTests/test_user_profile.py::testUserProfileValid - httpTe...
ERROR httpTests/userTests/test_user_profile.py::testInvalidUser - httpTests.e...
ERROR httpTests/userTests/test_user_profile.py::testInvalidToken - httpTests....
ERROR httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange
ERROR httpTests/userTests/test_user_profile_setemail.py::testCannotChangeToTakenEmail
ERROR httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[]
ERROR httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[bob]
ERROR httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab.com]
ERROR httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[@gmail.com]
ERROR httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab@ab@gmail.com]
ERROR httpTests/userTests/test_user_profile_setemail.py::testInvalidToken - h...
ERROR httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange
ERROR httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle
ERROR httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[]
ERROR httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a]
ERROR httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa]
ERROR httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa]
ERROR httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle]
ERROR httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle]
ERROR httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken - ...
ERROR httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName
ERROR httpTests/userTests/test_user_profile_setname.py::testInvalidName[-] - ...
ERROR httpTests/userTests/test_user_profile_setname.py::testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM]
ERROR httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-]
ERROR httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM]
ERROR httpTests/userTests/test_user_profile_setname.py::testInvalidToken - ht...
============= 9 failed, 6 passed, 183 skipped, 170 errors in 6.16s =============
